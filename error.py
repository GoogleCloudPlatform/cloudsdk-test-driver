# Copyright 2016 The Cloud SDK Test Driver Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Error handling for test driver."""

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

from cloudsdk_test_driver import constants


class DriverError(Exception):
  pass


class ConfigError(DriverError):
  """Raised for any error in the creation or use of a Config."""
  pass


class InitError(DriverError):
  """Raised for any error during driver initialization."""
  pass


class SDKError(DriverError):
  """Raised for any error when running the SDK."""
  pass


def RaiseInvalidKey(key):
  raise ConfigError(
      '[{key}] is not a valid config key.'.format(key=key))


def RaiseTarError(verb, tar, message):
  raise InitError('Something went wrong while {verb} [{tar}]: {msg}'.format(
      verb=verb, tar=tar, msg=message))


def ValidateLockedEnvironmentVariables(dictionary):
  """Check that a Config dictionary doesn't contain any locked env variables.

  Args:
    dictionary: {string: ...}, A Config dictionary

  Raises:
    ConfigError: if any of the checks fail indicating that the Config is
      invalid.
  """
  if 'environment_variables' in dictionary:
    for var in constants.LOCKED_ENVIRONMENT_VARIABLES:
      if var in dictionary['environment_variables']:
        raise ConfigError(
            'Environment variable [{var}] cannot be set.'.format(var=var))


def HandlePossibleError(result_tuple, error_type, msg):
  """Takes the output of Run and raises a formatted exception if needed.

  Unpacks the results of a Run command and raises a formatted error if the
  return code wasn't 0.

  Args:
    result_tuple: (string, string, int), the tuple generated by a Run command.
    error_type: type, the type of error to raise if the run command failed.
    msg: string, an additional message to add to the error.
  """
  out, err, code = result_tuple
  if code != 0:
    msg = ('{msg}\nReturn code: {code}\nstdout <<<{out}>>>\n'
           'stderr <<<{err}>>>'.format(msg=msg, code=code, out=out, err=err))
    raise error_type(msg)
